// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFornecedor = `-- name: CreateFornecedor :one
INSERT INTO fornecedor (id, name, telefone, email, adress, company_id, who_created_id, who_updated_id, cnpj)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, name, telefone, email, adress, company_id, who_created_id, who_updated_id, cnpj
`

type CreateFornecedorParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Telefone     string    `json:"telefone"`
	Email        string    `json:"email"`
	Adress       string    `json:"adress"`
	CompanyID    string    `json:"company_id"`
	WhoCreatedID string    `json:"who_created_id"`
	WhoUpdatedID string    `json:"who_updated_id"`
	Cnpj         string    `json:"cnpj"`
}

func (q *Queries) CreateFornecedor(ctx context.Context, arg CreateFornecedorParams) (Fornecedor, error) {
	row := q.queryRow(ctx, q.createFornecedorStmt, createFornecedor,
		arg.ID,
		arg.Name,
		arg.Telefone,
		arg.Email,
		arg.Adress,
		arg.CompanyID,
		arg.WhoCreatedID,
		arg.WhoUpdatedID,
		arg.Cnpj,
	)
	var i Fornecedor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Telefone,
		&i.Email,
		&i.Adress,
		&i.CompanyID,
		&i.WhoCreatedID,
		&i.WhoUpdatedID,
		&i.Cnpj,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
WITH valid_fornecedor AS (
  SELECT id
  FROM fornecedor
  WHERE id = $1
)
INSERT INTO product (id, name, price, fornecedor_id, description, brand, created_at, updated_at, bar_code, quantity, company_id, who_created_id, who_updated_id)
SELECT $2, $3, $4, $1, $5, $6, current_timestamp, current_timestamp, $7, $8, $9, $10, $11
FROM valid_fornecedor
RETURNING id, name, price, fornecedor_id, description, brand, created_at, updated_at, bar_code, quantity, company_id, who_created_id, who_updated_id
`

type CreateProductParams struct {
	FornecedorID *string   `json:"fornecedor_id"`
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Price        float64   `json:"price"`
	Description  string    `json:"description"`
	Brand        string    `json:"brand"`
	BarCode      string    `json:"bar_code"`
	Quantity     int32     `json:"quantity"`
	CompanyID    string    `json:"company_id"`
	WhoCreatedID string    `json:"who_created_id"`
	WhoUpdatedID string    `json:"who_updated_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.FornecedorID,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.Brand,
		arg.BarCode,
		arg.Quantity,
		arg.CompanyID,
		arg.WhoCreatedID,
		arg.WhoUpdatedID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.FornecedorID,
		&i.Description,
		&i.Brand,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BarCode,
		&i.Quantity,
		&i.CompanyID,
		&i.WhoCreatedID,
		&i.WhoUpdatedID,
	)
	return i, err
}

const deleteFornecedorById = `-- name: DeleteFornecedorById :exec
DELETE FROM fornecedor
WHERE id = $1
`

func (q *Queries) DeleteFornecedorById(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFornecedorByIdStmt, deleteFornecedorById, id)
	return err
}

const deleteProductById = `-- name: DeleteProductById :exec
DELETE FROM product
WHERE id = $1
`

func (q *Queries) DeleteProductById(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProductByIdStmt, deleteProductById, id)
	return err
}

const getAllFornecedores = `-- name: GetAllFornecedores :many
SELECT id, name, telefone, email, adress, company_id, who_created_id, who_updated_id, cnpj FROM fornecedor ORDER BY id ASC
`

func (q *Queries) GetAllFornecedores(ctx context.Context) ([]Fornecedor, error) {
	rows, err := q.query(ctx, q.getAllFornecedoresStmt, getAllFornecedores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fornecedor
	for rows.Next() {
		var i Fornecedor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Telefone,
			&i.Email,
			&i.Adress,
			&i.CompanyID,
			&i.WhoCreatedID,
			&i.WhoUpdatedID,
			&i.Cnpj,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, fornecedor_id, description, brand, created_at, updated_at, bar_code, quantity, company_id, who_created_id, who_updated_id FROM product ORDER BY id ASC
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.getAllProductsStmt, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.FornecedorID,
			&i.Description,
			&i.Brand,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BarCode,
			&i.Quantity,
			&i.CompanyID,
			&i.WhoCreatedID,
			&i.WhoUpdatedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFornecedor = `-- name: UpdateFornecedor :one
UPDATE fornecedor
SET name = $1,
    telefone = $2,
    email = $3,
    adress = $4,
    company_id = $5,
    who_updated_id = $6,
    cnpj = $7
WHERE id = $8
RETURNING id, name, telefone, email, adress, company_id, who_created_id, who_updated_id, cnpj
`

type UpdateFornecedorParams struct {
	Name         string    `json:"name"`
	Telefone     string    `json:"telefone"`
	Email        string    `json:"email"`
	Adress       string    `json:"adress"`
	CompanyID    string    `json:"company_id"`
	WhoUpdatedID string    `json:"who_updated_id"`
	Cnpj         string    `json:"cnpj"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateFornecedor(ctx context.Context, arg UpdateFornecedorParams) (Fornecedor, error) {
	row := q.queryRow(ctx, q.updateFornecedorStmt, updateFornecedor,
		arg.Name,
		arg.Telefone,
		arg.Email,
		arg.Adress,
		arg.CompanyID,
		arg.WhoUpdatedID,
		arg.Cnpj,
		arg.ID,
	)
	var i Fornecedor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Telefone,
		&i.Email,
		&i.Adress,
		&i.CompanyID,
		&i.WhoCreatedID,
		&i.WhoUpdatedID,
		&i.Cnpj,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
WITH valid_fornecedor AS (
  SELECT id
  FROM fornecedor
  WHERE id = $1
)
UPDATE product
SET name = $2,
    price = $3,
    fornecedor_id = $1,
    description = $4,
    brand = $5,
    updated_at = current_timestamp,
    bar_code = $6,
    quantity = $7,
    company_id = $8,
    who_updated_id = $9
FROM valid_fornecedor
WHERE product.id = $10
RETURNING valid_fornecedor.id, product.id, name, price, fornecedor_id, description, brand, created_at, updated_at, bar_code, quantity, company_id, who_created_id, who_updated_id
`

type UpdateProductParams struct {
	FornecedorID *string   `json:"fornecedor_id"`
	Name         string    `json:"name"`
	Price        float64   `json:"price"`
	Description  string    `json:"description"`
	Brand        string    `json:"brand"`
	BarCode      string    `json:"bar_code"`
	Quantity     int32     `json:"quantity"`
	CompanyID    string    `json:"company_id"`
	WhoUpdatedID string    `json:"who_updated_id"`
	ID           uuid.UUID `json:"id"`
}

type UpdateProductRow struct {
	ID           uuid.UUID `json:"id"`
	ID_2         uuid.UUID `json:"id_2"`
	Name         string    `json:"name"`
	Price        float64   `json:"price"`
	FornecedorID *string   `json:"fornecedor_id"`
	Description  string    `json:"description"`
	Brand        string    `json:"brand"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	BarCode      string    `json:"bar_code"`
	Quantity     int32     `json:"quantity"`
	CompanyID    string    `json:"company_id"`
	WhoCreatedID string    `json:"who_created_id"`
	WhoUpdatedID string    `json:"who_updated_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (UpdateProductRow, error) {
	row := q.queryRow(ctx, q.updateProductStmt, updateProduct,
		arg.FornecedorID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.Brand,
		arg.BarCode,
		arg.Quantity,
		arg.CompanyID,
		arg.WhoUpdatedID,
		arg.ID,
	)
	var i UpdateProductRow
	err := row.Scan(
		&i.ID,
		&i.ID_2,
		&i.Name,
		&i.Price,
		&i.FornecedorID,
		&i.Description,
		&i.Brand,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BarCode,
		&i.Quantity,
		&i.CompanyID,
		&i.WhoCreatedID,
		&i.WhoUpdatedID,
	)
	return i, err
}
