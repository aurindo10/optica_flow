// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id, name, price, fornecedor, description, brand, created_at, updated_at)
 values ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, name, price, fornecedor, description, brand, created_at, updated_at
`

type CreateProductParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Price       float64   `json:"price"`
	Fornecedor  string    `json:"fornecedor"`
	Description string    `json:"description"`
	Brand       string    `json:"brand"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Fornecedor,
		arg.Description,
		arg.Brand,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Fornecedor,
		&i.Description,
		&i.Brand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletProduct = `-- name: DeletProduct :exec
DELETE FROM product WHERE id = $1
`

func (q *Queries) DeletProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deletProductStmt, deletProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, fornecedor, description, brand, created_at, updated_at FROM product ORDER BY id ASC
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.getAllProductsStmt, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Fornecedor,
			&i.Description,
			&i.Brand,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product 
SET 
name = coalesce($2, name),
price = coalesce($3, price),
fornecedor = coalesce($4, fornecedor),
description = coalesce($5, description),
brand = coalesce($6, brand),
updated_at = now()
WHERE id = $1
RETURNING id, name, price, fornecedor, description, brand, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	Price       *float64  `json:"price"`
	Fornecedor  *string   `json:"fornecedor"`
	Description *string   `json:"description"`
	Brand       *string   `json:"brand"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.updateProductStmt, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Fornecedor,
		arg.Description,
		arg.Brand,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Fornecedor,
		&i.Description,
		&i.Brand,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
